// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: payments/v1alpha1/cellwise_attribution.proto

package payments

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type HashToIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PastHashes        [][]byte `protobuf:"bytes,1,rep,name=past_hashes,json=pastHashes,proto3" json:"past_hashes,omitempty"`
	PastCommitIndexes []int32  `protobuf:"varint,2,rep,packed,name=past_commit_indexes,json=pastCommitIndexes,proto3" json:"past_commit_indexes,omitempty"`
}

func (x *HashToIndex) Reset() {
	*x = HashToIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashToIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashToIndex) ProtoMessage() {}

func (x *HashToIndex) ProtoReflect() protoreflect.Message {
	mi := &file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashToIndex.ProtoReflect.Descriptor instead.
func (*HashToIndex) Descriptor() ([]byte, []int) {
	return file_payments_v1alpha1_cellwise_attribution_proto_rawDescGZIP(), []int{0}
}

func (x *HashToIndex) GetPastHashes() [][]byte {
	if x != nil {
		return x.PastHashes
	}
	return nil
}

func (x *HashToIndex) GetPastCommitIndexes() []int32 {
	if x != nil {
		return x.PastCommitIndexes
	}
	return nil
}

type CellAttribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitIdx  int32        `protobuf:"varint,1,opt,name=commit_idx,json=commitIdx,proto3" json:"commit_idx,omitempty"`
	PastValues *HashToIndex `protobuf:"bytes,2,opt,name=past_values,json=pastValues,proto3" json:"past_values,omitempty"`
}

func (x *CellAttribution) Reset() {
	*x = CellAttribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellAttribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellAttribution) ProtoMessage() {}

func (x *CellAttribution) ProtoReflect() protoreflect.Message {
	mi := &file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellAttribution.ProtoReflect.Descriptor instead.
func (*CellAttribution) Descriptor() ([]byte, []int) {
	return file_payments_v1alpha1_cellwise_attribution_proto_rawDescGZIP(), []int{1}
}

func (x *CellAttribution) GetCommitIdx() int32 {
	if x != nil {
		return x.CommitIdx
	}
	return 0
}

func (x *CellAttribution) GetPastValues() *HashToIndex {
	if x != nil {
		return x.PastValues
	}
	return nil
}

type TagToCellAttribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags    []uint64           `protobuf:"varint,1,rep,packed,name=tags,proto3" json:"tags,omitempty"`
	CellAtt []*CellAttribution `protobuf:"bytes,2,rep,name=cell_att,json=cellAtt,proto3" json:"cell_att,omitempty"`
}

func (x *TagToCellAttribution) Reset() {
	*x = TagToCellAttribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagToCellAttribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagToCellAttribution) ProtoMessage() {}

func (x *TagToCellAttribution) ProtoReflect() protoreflect.Message {
	mi := &file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagToCellAttribution.ProtoReflect.Descriptor instead.
func (*TagToCellAttribution) Descriptor() ([]byte, []int) {
	return file_payments_v1alpha1_cellwise_attribution_proto_rawDescGZIP(), []int{2}
}

func (x *TagToCellAttribution) GetTags() []uint64 {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TagToCellAttribution) GetCellAtt() []*CellAttribution {
	if x != nil {
		return x.CellAtt
	}
	return nil
}

type PKHashToTagToCellAttribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PkHashes  [][]byte                `protobuf:"bytes,1,rep,name=pk_hashes,json=pkHashes,proto3" json:"pk_hashes,omitempty"`
	TagToCell []*TagToCellAttribution `protobuf:"bytes,2,rep,name=tag_to_cell,json=tagToCell,proto3" json:"tag_to_cell,omitempty"`
}

func (x *PKHashToTagToCellAttribution) Reset() {
	*x = PKHashToTagToCellAttribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKHashToTagToCellAttribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKHashToTagToCellAttribution) ProtoMessage() {}

func (x *PKHashToTagToCellAttribution) ProtoReflect() protoreflect.Message {
	mi := &file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKHashToTagToCellAttribution.ProtoReflect.Descriptor instead.
func (*PKHashToTagToCellAttribution) Descriptor() ([]byte, []int) {
	return file_payments_v1alpha1_cellwise_attribution_proto_rawDescGZIP(), []int{3}
}

func (x *PKHashToTagToCellAttribution) GetPkHashes() [][]byte {
	if x != nil {
		return x.PkHashes
	}
	return nil
}

func (x *PKHashToTagToCellAttribution) GetTagToCell() []*TagToCellAttribution {
	if x != nil {
		return x.TagToCell
	}
	return nil
}

type TableAttribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowAttribution  *PKHashToTagToCellAttribution `protobuf:"bytes,1,opt,name=row_attribution,json=rowAttribution,proto3" json:"row_attribution,omitempty"`
	CommitToCount   map[int32]uint32              `protobuf:"bytes,2,rep,name=commit_to_count,json=commitToCount,proto3" json:"commit_to_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AttributedCells uint64                        `protobuf:"varint,3,opt,name=attributed_cells,json=attributedCells,proto3" json:"attributed_cells,omitempty"`
}

func (x *TableAttribution) Reset() {
	*x = TableAttribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableAttribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableAttribution) ProtoMessage() {}

func (x *TableAttribution) ProtoReflect() protoreflect.Message {
	mi := &file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableAttribution.ProtoReflect.Descriptor instead.
func (*TableAttribution) Descriptor() ([]byte, []int) {
	return file_payments_v1alpha1_cellwise_attribution_proto_rawDescGZIP(), []int{4}
}

func (x *TableAttribution) GetRowAttribution() *PKHashToTagToCellAttribution {
	if x != nil {
		return x.RowAttribution
	}
	return nil
}

func (x *TableAttribution) GetCommitToCount() map[int32]uint32 {
	if x != nil {
		return x.CommitToCount
	}
	return nil
}

func (x *TableAttribution) GetAttributedCells() uint64 {
	if x != nil {
		return x.AttributedCells
	}
	return 0
}

type CellwiseDBAttribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartHash      []byte                       `protobuf:"bytes,1,opt,name=start_hash,json=startHash,proto3" json:"start_hash,omitempty"`
	Commits        [][]byte                     `protobuf:"bytes,2,rep,name=commits,proto3" json:"commits,omitempty"`
	NameToTableAtt map[string]*TableAttribution `protobuf:"bytes,3,rep,name=name_to_table_att,json=nameToTableAtt,proto3" json:"name_to_table_att,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CellwiseDBAttribution) Reset() {
	*x = CellwiseDBAttribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellwiseDBAttribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellwiseDBAttribution) ProtoMessage() {}

func (x *CellwiseDBAttribution) ProtoReflect() protoreflect.Message {
	mi := &file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellwiseDBAttribution.ProtoReflect.Descriptor instead.
func (*CellwiseDBAttribution) Descriptor() ([]byte, []int) {
	return file_payments_v1alpha1_cellwise_attribution_proto_rawDescGZIP(), []int{5}
}

func (x *CellwiseDBAttribution) GetStartHash() []byte {
	if x != nil {
		return x.StartHash
	}
	return nil
}

func (x *CellwiseDBAttribution) GetCommits() [][]byte {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *CellwiseDBAttribution) GetNameToTableAtt() map[string]*TableAttribution {
	if x != nil {
		return x.NameToTableAtt
	}
	return nil
}

var File_payments_v1alpha1_cellwise_attribution_proto protoreflect.FileDescriptor

var file_payments_v1alpha1_cellwise_attribution_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x77, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22,
	0x64, 0x6f, 0x6c, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x22, 0x5e, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x11, 0x70, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x49, 0x64, 0x78, 0x12, 0x50, 0x0a, 0x0b, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x6f, 0x6c,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0a, 0x70, 0x61, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x14, 0x54, 0x61, 0x67, 0x54, 0x6f,
	0x43, 0x65, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x6f, 0x6c, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x65, 0x6c, 0x6c,
	0x41, 0x74, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x1c, 0x50, 0x4b, 0x48, 0x61, 0x73, 0x68, 0x54, 0x6f,
	0x54, 0x61, 0x67, 0x54, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x12, 0x58, 0x0a, 0x0b, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x6f, 0x6c, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x54,
	0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x74, 0x61, 0x67, 0x54, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x22, 0xdb, 0x02, 0x0a, 0x10,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x69, 0x0a, 0x0f, 0x72, 0x6f, 0x77, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x64, 0x6f, 0x6c, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50,
	0x4b, 0x48, 0x61, 0x73, 0x68, 0x54, 0x6f, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x43, 0x65, 0x6c, 0x6c,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x6f, 0x77,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x64, 0x6f, 0x6c, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x62,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbf, 0x02, 0x0a, 0x13, 0x43, 0x65,
	0x6c, 0x6c, 0x77, 0x69, 0x73, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x76, 0x0a, 0x11, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x64, 0x6f, 0x6c, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x77,
	0x69, 0x73, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x74, 0x74, 0x1a, 0x77, 0x0a, 0x13, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x74, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x6f, 0x6c,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x54, 0x5a, 0x52, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x6c, 0x74, 0x68, 0x75,
	0x62, 0x2f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x6f, 0x6c, 0x74, 0x68, 0x75, 0x62, 0x2f,
	0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_payments_v1alpha1_cellwise_attribution_proto_rawDescOnce sync.Once
	file_payments_v1alpha1_cellwise_attribution_proto_rawDescData = file_payments_v1alpha1_cellwise_attribution_proto_rawDesc
)

func file_payments_v1alpha1_cellwise_attribution_proto_rawDescGZIP() []byte {
	file_payments_v1alpha1_cellwise_attribution_proto_rawDescOnce.Do(func() {
		file_payments_v1alpha1_cellwise_attribution_proto_rawDescData = protoimpl.X.CompressGZIP(file_payments_v1alpha1_cellwise_attribution_proto_rawDescData)
	})
	return file_payments_v1alpha1_cellwise_attribution_proto_rawDescData
}

var file_payments_v1alpha1_cellwise_attribution_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_payments_v1alpha1_cellwise_attribution_proto_goTypes = []interface{}{
	(*HashToIndex)(nil),                  // 0: dolthub.bounties.payments.v1alpha1.HashToIndex
	(*CellAttribution)(nil),              // 1: dolthub.bounties.payments.v1alpha1.CellAttribution
	(*TagToCellAttribution)(nil),         // 2: dolthub.bounties.payments.v1alpha1.TagToCellAttribution
	(*PKHashToTagToCellAttribution)(nil), // 3: dolthub.bounties.payments.v1alpha1.PKHashToTagToCellAttribution
	(*TableAttribution)(nil),             // 4: dolthub.bounties.payments.v1alpha1.TableAttribution
	(*CellwiseDBAttribution)(nil),        // 5: dolthub.bounties.payments.v1alpha1.CellwiseDBAttribution
	nil,                                  // 6: dolthub.bounties.payments.v1alpha1.TableAttribution.CommitToCountEntry
	nil,                                  // 7: dolthub.bounties.payments.v1alpha1.CellwiseDBAttribution.NameToTableAttEntry
}
var file_payments_v1alpha1_cellwise_attribution_proto_depIdxs = []int32{
	0, // 0: dolthub.bounties.payments.v1alpha1.CellAttribution.past_values:type_name -> dolthub.bounties.payments.v1alpha1.HashToIndex
	1, // 1: dolthub.bounties.payments.v1alpha1.TagToCellAttribution.cell_att:type_name -> dolthub.bounties.payments.v1alpha1.CellAttribution
	2, // 2: dolthub.bounties.payments.v1alpha1.PKHashToTagToCellAttribution.tag_to_cell:type_name -> dolthub.bounties.payments.v1alpha1.TagToCellAttribution
	3, // 3: dolthub.bounties.payments.v1alpha1.TableAttribution.row_attribution:type_name -> dolthub.bounties.payments.v1alpha1.PKHashToTagToCellAttribution
	6, // 4: dolthub.bounties.payments.v1alpha1.TableAttribution.commit_to_count:type_name -> dolthub.bounties.payments.v1alpha1.TableAttribution.CommitToCountEntry
	7, // 5: dolthub.bounties.payments.v1alpha1.CellwiseDBAttribution.name_to_table_att:type_name -> dolthub.bounties.payments.v1alpha1.CellwiseDBAttribution.NameToTableAttEntry
	4, // 6: dolthub.bounties.payments.v1alpha1.CellwiseDBAttribution.NameToTableAttEntry.value:type_name -> dolthub.bounties.payments.v1alpha1.TableAttribution
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_payments_v1alpha1_cellwise_attribution_proto_init() }
func file_payments_v1alpha1_cellwise_attribution_proto_init() {
	if File_payments_v1alpha1_cellwise_attribution_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashToIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellAttribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagToCellAttribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKHashToTagToCellAttribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableAttribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payments_v1alpha1_cellwise_attribution_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellwiseDBAttribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_payments_v1alpha1_cellwise_attribution_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_payments_v1alpha1_cellwise_attribution_proto_goTypes,
		DependencyIndexes: file_payments_v1alpha1_cellwise_attribution_proto_depIdxs,
		MessageInfos:      file_payments_v1alpha1_cellwise_attribution_proto_msgTypes,
	}.Build()
	File_payments_v1alpha1_cellwise_attribution_proto = out.File
	file_payments_v1alpha1_cellwise_attribution_proto_rawDesc = nil
	file_payments_v1alpha1_cellwise_attribution_proto_goTypes = nil
	file_payments_v1alpha1_cellwise_attribution_proto_depIdxs = nil
}
